module "db" {
  source  = "terraform-aws-modules/rds/aws"
  version = "~> 3.4.1"

  # Instance Details
  identifier           = "${var.app_name}-${lower(var.infra_environment)}-${var.app_environment}"
  engine               = var.db_engine
  engine_version       = var.db_engine_version
  family               = var.family               # DB parameter group
  major_engine_version = var.major_engine_version # DB option group
  instance_class       = var.db_instance_class
  kms_key_id           = var.kms_key_id
  license_model        = var.license_model

  # Storage Details
  allocated_storage     = var.db_allocated_storage
  max_allocated_storage = var.db_max_allocated_storage
  storage_type          = var.db_storage_type
  storage_encrypted     = var.storage_encrypted

  # Initial DB details
  name                   = var.db_name
  username               = var.db_username
  create_random_password = var.create_random_password
  random_password_length = 16
  port                   = var.db_port

  multi_az = var.multi_az

  # Network Details
  subnet_ids             = var.subnet_ids
  vpc_security_group_ids = var.vpc_security_group_ids

  # Management
  maintenance_window              = var.db_maintenance_window
  backup_window                   = var.db_backup_window
  backup_retention_period         = var.db_backup_retention_period
  enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports
  skip_final_snapshot             = var.skip_final_snapshot
  deletion_protection             = var.deletion_protection
  copy_tags_to_snapshot           = var.copy_tags_to_snapshot
  performance_insights_enabled    = var.performance_insights_enabled
  performance_insights_kms_key_id = var.performance_insights_kms_key_id
  delete_automated_backups        = var.delete_automated_backups


  # Monitoring Details
  create_monitoring_role = var.create_monitoring_role
  monitoring_interval    = var.monitoring_interval
  monitoring_role_name   = "${var.monitoring_role_name}-${var.app_environment}"
  monitoring_role_arn    = var.monitoring_role_arn

  # Parameter Settings
  create_db_option_group    = var.create_db_option_group
  create_db_parameter_group = var.create_db_parameter_group
  parameters                = var.parameters

  tags = var.tags
}

resource "aws_sns_topic" "default" {
  name = "${lower(var.app_name)}-${lower(var.infra_environment)}-${var.app_environment}-rds-events"
  tags = var.tags
}

resource "aws_db_event_subscription" "default" {
  name      = "${lower(var.app_name)}-${lower(var.infra_environment)}-${var.app_environment}-event-sub"
  sns_topic = aws_sns_topic.default.arn

  source_type = "db-instance"
  source_ids  = [module.db.db_instance_id]

  event_categories = [
    "availability",
    "deletion",
    "failover",
    "failure",
    "low storage",
    "maintenance",
    "notification",
    "read replica",
    "recovery",
    "restoration",
  ]

  tags = var.tags
}
--------------------------
variable "account_name" {
  description = "AWS Account Name (Examples: DEV, NONPROD, PROD)"
  type        = string
}

variable "app_environment" {
  description = "Application environment (Examples: dev, nonprod, prod)"
  type        = string
}

variable "app_name" {
  description = "Application name (Examples: DPXN, MYPAYCENTER)"
  type        = string
}

variable "infra_environment" {
  description = "Environment for the infrastructure equivalent to Chef Environment (Examples: dpxn-production, mypaycenter-dev)"
  type        = string
}

variable "aws_region" {
  description = "AWS Region (Example: us-west-1)"
  type        = string
}

variable "subnet_ids" {
  type    = list(string)
  default = ["d1", "f2"]
}

variable "vpc_security_group_ids" {
  type    = list(string)
  default = ["d1", "f2"]
}

variable "db_maintenance_window" {
  description = "The window to perform maintenance in. Syntax: 'ddd:hh24:mi-ddd:hh24:mi'. Example: 'Mon:00:00-Mon:03:00'."
  type        = string
  default     = "Sun:05:00-Sun:06:00"
}

variable "db_backup_window" {
  description = "The daily time range (in UTC) during which automated backups are created if they are enabled. Example: '09:46-10:16'. Must not overlap with maintenance_window"
  type        = string
  default     = "04:00-05:00"
}

variable "db_backup_retention_period" {
  description = "The days to retain backups for. Must be between 0 and 35"
  type        = number
  default     = 14
}

variable "db_storage_type" {
  description = "One of 'standard' (magnetic), 'gp2' (general purpose SSD), or 'io1' (provisioned IOPS SSD)"
  type        = string
  default     = "gp2"
}

variable "db_instance_class" {
  description = "The instance type of the RDS instance"
  type        = string
  default     = "db.t3.medium"
}

variable "db_engine" {
  description = "The database engine to use. Examples: aurora, aurora-mysql, aurora-postgresql, mariadb, mysql, oracle-ee, oracle-ee-cdb, oracle-se2, oracle-se2-cdb, postgres, sqlserver-ee, sqlserver-se, sqlserver-ex, sqlserver-web"
  type        = string
}

variable "db_engine_version" {
  description = "The engine version to use. If auto_minor_version_upgrade is enabled, you can provide a prefix of the version such as 5.7 (for 5.7.10)"
  type        = string
}

variable "db_allocated_storage" {
  description = "The allocated storage in gigabytes. If max_allocated_storage is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs"
  type        = number
  default     = 100
}

variable "db_max_allocated_storage" {
  description = "When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to allocated_storage. Must be greater than or equal to allocated_storage or 0 to disable Storage Autoscaling"
  type        = number
  default     = 1500
}

variable "copy_tags_to_snapshot" {
  description = "Copy all Instance tags to snapshots"
  type        = bool
  default     = true
}

variable "kms_key_id" {
  description = "The ARN for the KMS encryption key. If creating an encrypted replica, set this to the destination KMS ARN"
  type        = string
  default     = "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
}

variable "license_model" {
  description = "License model information for this DB instance."
  type        = string
  default     = null
}

variable "performance_insights_enabled" {
  description = "Specifies whether Performance Insights are enabled"
  type        = bool
  default     = true
}

variable "performance_insights_retention_period" {
  description = "The amount of time in days to retain Performance Insights data. Either 7 (7 days) or 731 (2 years)."
  type        = number
  default     = 30
}

variable "performance_insights_kms_key_id" {
  description = "The ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true. Once KMS key is set, it can never be changed"
  type        = string
  default     = "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
}

variable "enabled_cloudwatch_logs_exports" {
  description = "Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. Valid values (depending on engine). MySQL and MariaDB: audit, error, general, slowquery. PostgreSQL: postgresql, upgrade. MSSQL: agent , error. Oracle: alert, audit, listener, trace."
  type        = list(string)
  default     = ["error", "general", "slowquery"]
}

variable "monitoring_interval" {
  description = "The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0"
  type        = number
  default     = 30
}

variable "delete_automated_backups" {
  description = "Specifies whether to remove automated backups immediately after the DB instance is deleted"
  type        = bool
  default     = true
}

variable "skip_final_snapshot" {
  description = "Determines whether a final DB snapshot is created before the DB instance is deleted"
  type        = bool
  default     = false
}

variable "deletion_protection" {
  description = "If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true"
  type        = bool
  default     = true
}

variable "storage_encrypted" {
  description = "Specifies whether the DB instance is encrypted. Note that if you are creating a cross-region read replica this field is ignored and you should instead declare kms_key_id with a valid ARN"
  type        = bool
  default     = true
}

variable "multi_az" {
  description = "Specifies if the RDS instance is multi-AZ"
  type        = bool
  default     = false
}

variable "db_name" {
  description = "Name of the default database to make"
  type        = string
  default     = null
}

variable "db_username" {
  description = "Username for the master DB user"
  type        = string
  default     = "admin"
}
variable "db_password" {
  description = "Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file"
  type        = string
  default     = null
}

variable "create_random_password" {
  description = "Whether to create random password for RDS primary cluster"
  type        = bool
  default     = true
}

variable "tags" {
  description = "A map of tags to assign to the resource. If configured with a provider default_tags"
  type        = map(string)
}

variable "create_db_option_group" {
  description = "This controls if we should create a custom db_option_group. Refer to main module docs. https://github.com/terraform-aws-modules/terraform-aws-rds/blob/master/variables.tf#L345"
  type        = bool
  default     = false
}

variable "create_db_parameter_group" {
  description = "This controls if we should create a custom db_parameter_group. Refer to main module docs. https://github.com/terraform-aws-modules/terraform-aws-rds/blob/master/variables.tf#L308"
  type        = bool
  default     = false
}

variable "parameters" {
  description = "A list of DB parameters (map) to apply"
  type        = list(map(string))
  default     = []
}

variable "family" {
  description = "The family of the DB parameter group"
  type        = string
  default     = "mysql8.0"
}

variable "major_engine_version" {
  description = "Specifies the major version of the engine that this option group should be associated with"
  type        = string
  default     = "8.0"
}

variable "db_port" {
  description = "Defines port for db instance. Defaults to mysql port."
  type        = number
  default     = "3306"
}

variable "create_monitoring_role" {
  description = "Control whether to create RDS monitoring role or not. "
  type        = bool
  default     = true
}

variable "monitoring_role_arn" {
  description = "Monitoring role arn to use that references a monitoring role that exists"
  type        = string
  default     = null
}

variable "monitoring_role_name" {
  description = "Name of the IAM role which will be created when create_monitoring_role is enabled"
  type        = string
  default     = "rds-monitoring-role"
}
